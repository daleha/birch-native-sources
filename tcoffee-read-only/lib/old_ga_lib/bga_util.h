Decoded_chromosome *decode_chromosome (Chromosome *A, Decoded_chromosome *B, Parameter *PARAM);
Chromosome         *code_chromosome ( Decoded_chromosome *A, Chromosome *B, Parameter *PARAM);
Decoded_chromosome *copy_decoded_chromosome ( Decoded_chromosome *A, Decoded_chromosome *B, Parameter *PARAM);
Chromosome         *copy_chromosome ( Chromosome *A, Chromosome *B, Parameter *PARAM);
Chromosome         *extract_chrom ( Population *POP, int G, int i, Chromosome *A, Parameter *PARAM);
void insert_chrom  ( Chromosome *A, Population *POP, int G, int i, Parameter *PARAM);

void copy_individual ( Population *POP, int G0, int i0,int G1, int i1, Parameter *PARAM); 
int is_dup (Chromosome *A, Population *L_POP, int **m_t, int tot_g1, Parameter *PARAM);
void sort_float ( float **V,int N_F, int F, int left, int right);
void sort_int_inv ( int **V,int N_F, int F, int left, int right);
void swap_BLOCS_float (float **V, int N_F, int i, int j);
void sort_int_1D ( int *L, int n);
void sort_int ( int **V,int N_F, int F, int left, int right);
void swap_BLOCS_int (int **V, int N_F, int i, int j);
int ** duplicate_int ( int **array , int len, int field);
float ** duplicate_float ( float **array , int len, int field);
void copy_int ( int **array1, int **array2, int len, int field);
void copy_float ( float **array1, float **array2, int len, int field);
double return_max_double ( double ** array, int len_array, int field);
double return_min_double ( double ** array, int len_array, int field);
float return_max_float ( float ** array, int len_array, int field);
float return_2Dmax_float ( float ** array, int start, int len_array, int first_field, int number_field);
float return_min_float ( float ** array, int len_array, int field);
float return_2Dmin_float ( float ** array, int start, int len_array, int first_field, int number_field);
int return_max_int ( int ** array, int len_array, int field);
int return_max_int_hor ( short int ** array, int len_array, int field);
int return_min_int ( int ** array, int len_array, int field);
int return_min_int_hor ( short int ** array, int len_array, int field);
int min_int ( int a, int b);
int return_maxlen ( char ** array, int number);
int return_minlen ( char ** array, int number);
void swap_double ( double *a, double *b, int n);
void swap_float ( float *a, float *b, int n);
void swap_int ( int *a, int *b, int n);
float return_sum_float ( float **array, int len, int field);
float return_mean_float ( float **array, int len, int field);
float return_sd_float ( float** array, int len, int field,float mean);
float return_mean_diff_float ( float** array, int len, int field,float mean);
int return_sum_int ( int **array, int len, int field);
int return_mean_int ( int **array, int len, int field);
int return_sd_int ( int **array, int len, int field,int mean);

int ** duplicate_int ( int **array , int len, int field);
int float_flip ( float proba);
char * extract_char ( char * array, int first, int last);
void inverse_int ( int**array, int len, int field, int max, int min);
void inverse_float ( float **array, int len, int field, int max, int min);
void inverse_2D_float ( float **array, int start, int len, int start_field, int number_field, float max, float min);
void reasses_local_bias (Population *POP, int G, Parameter *PARAM, int gen, int stab);
char * generate_void ( int x);
FILE * vfopen ( char *name, char *mode);
void input_parameter ( char *name1, char *name_type, int interactive, Parameter *PARAM);
char *input_name ();
void set_name ( char *full_name, char *path, char *fname);
int is_full_name ( char *fname);
void delete_file ( char *fname);
Decoded_chromosome *get_mem_free_decoded_chrom ( Parameter *PARAM);
void free_mem_dc ( Decoded_chromosome *D, Parameter *PARAM);
int cmp_int ( const int**a, const int**b);
int cmp_float ( const float **a, const float **b);
void ga_memcpy_int ( int *array1, int *array2, int n);
void ga_memcpy_float (float *array1, float *array2, int n);
void crash(char *string);
void identify_operating_system ( Parameter *PARAM);
void setenv_func ( char *string_name, char *string_value);
void get_pwd ( char *name);
int int_fabs ( int k);
int name_is_in_list ( char *name, char **name_list, int n_name, int len);
FILE * find_token_in_file ( char *fname,FILE *fp, char *token);
int check_file_exists ( char *fname);
FILE *get_number_list_in_file ( FILE *fp, int *list, int *n, int *max_len);
void crash2(int a, int b);
